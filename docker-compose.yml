services:
  # PostgreSQL with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: atm_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-atm_insight}
      POSTGRES_HOST_AUTH_METHOD: trust
      TIMESCALEDB_TELEMETRY: 'off'
    command: |
      postgres 
      -c shared_preload_libraries=timescaledb 
      -c max_connections=200 
      -c shared_buffers=256MB 
      -c effective_cache_size=1GB 
      -c work_mem=4MB 
      -c maintenance_work_mem=64MB
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-timescale.sql:/docker-entrypoint-initdb.d/init-timescale.sql
    networks:
      - atm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-atm_insight}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for pub/sub and caching
  redis:
    image: redis:7-alpine
    container_name: atm_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - atm_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # FastAPI Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-atm_insight}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      - ENV=${ENV:-development}
      - DEBUG=${DEBUG:-true}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - atm_network
    volumes:
      - ./backend:/app
    restart: unless-stopped
    profiles:
      - backend
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ATM Simulator (optional, can run separately)
  atm_simulator:
    build:
      context: ./atm-simulator
      dockerfile: Dockerfile
    container_name: atm_simulator
    environment:
      - API_BASE_URL=http://backend:8000
      - NUM_ATMS=${NUM_ATMS:-500}
      - SEND_INTERVAL=${SEND_INTERVAL:-30}
      - BATCH_SIZE=${BATCH_SIZE:-50}
    depends_on:
      - backend
    networks:
      - atm_network
    volumes:
      - ./atm-simulator:/app
    restart: unless-stopped
    profiles:
      - simulator  # Use: docker-compose --profile simulator up

  # # Diagnostics Engine (optional, can run separately)
  # diagnostics:
  #   build:
  #     context: ./3-diagnostics
  #     dockerfile: Dockerfile
  #   container_name: atm_diagnostics
  #   environment:
  #     - API_BASE_URL=http://backend:8000
  #     - ANALYSIS_INTERVAL=${ANALYSIS_INTERVAL:-10}
  #   depends_on:
  #     - backend
  #   networks:
  #     - atm_network
  #   volumes:
  #     - ./3-diagnostics:/app
  #     - diagnostics_models:/app/models
  #   restart: unless-stopped
  #   profiles:
  #     - diagnostics  # Use: docker-compose --profile diagnostics up

volumes:
  postgres_data:
  redis_data:
  # diagnostics_models:

networks:
  atm_network:
    driver: bridge
